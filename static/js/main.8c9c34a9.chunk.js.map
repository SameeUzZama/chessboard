{"version":3,"sources":["components/board/Square.jsx","components/util/KnightObserver.js","components/constants/ItemTypes.js","components/util/Overlay.jsx","components/board/SquareWrapper.jsx","components/pieces/Knight.jsx","lib/withDragDropContext.js","components/board/Board.jsx","App.jsx","index.js"],"names":["Square","_ref","squareIsBlack","children","squareStyle","backgroundColor","color","width","height","display","justifyContent","alignItems","react_default","a","createElement","style","knightPosition","observer","emitChange","ItemTypes","Overlay","position","top","left","zIndex","opacity","squareTarget","canDrop","toX","toY","_knightPosition","_knightPosition2","Object","slicedToArray","x","y","dx","Math","abs","dy","isValidKnightMove","drop","_ref2","SquareWrapper","_this$props","this","props","connectDropTarget","isOver","Square_Square","util_Overlay","Component","DropTarget","connect","monitor","dropTarget","Knight","connectDragSource","isDragging","knightStyle","cursor","concat","DragSource","beginDrag","dragSource","connectDragPreview","dragPreview","DragDropContext","HTML5Backend","boardStyle","margin","flexWrap","fontSize","border","withDragDropContext","_ref$knightPosition","knightX","knightY","renderSquare","i","floor","piece","renderPiece","key","board_SquareWrapper","pieces_Knight","squares","push","App","_useState","useState","_useState2","setKnightPosition","useEffect","o","Error","observe","newPosition","board_Board","mountNode","document","getElementById","render","src_App"],"mappings":"yMAEaA,EAAS,SAAAC,GAAiC,IAA9BC,EAA8BD,EAA9BC,cAAeC,EAAeF,EAAfE,SAGhCC,EAAc,CAClBC,gBAHWH,EAAgB,QAAU,QAIrCI,MAHaJ,EAAgB,QAAU,QAIvCK,MAAO,OACPC,OAAQ,OACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEd,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,MAAOX,GAAcD,ICd/Ba,EAAiB,CAAC,EAAG,GACrBC,EAAW,KAiBTC,EAAa,WACjBD,EAASD,IClBIG,EACL,SCiBKC,EAjBC,SAAAnB,GAAa,IAAXK,EAAWL,EAAXK,MAChB,OACEM,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLM,SAAU,WACVC,IAAK,EACLC,KAAM,EACNf,OAAQ,OACRD,MAAO,OACPiB,OAAQ,EACRC,QAAS,GACTpB,gBAAiBC,MCLnBoB,EAAe,CACnBC,QADmB,SAAA1B,GAEjB,OHa6B,SAAC2B,EAAKC,GAAQ,IAAAC,EAC9Bd,EAD8Be,EAAAC,OAAAC,EAAA,EAAAD,CAAAF,EAAA,GACtCI,EADsCH,EAAA,GACnCI,EADmCJ,EAAA,GAEvCK,EAAKC,KAAKC,IAAIV,EAAMM,GACpBK,EAAKF,KAAKC,IAAIT,EAAMM,GAC1B,OACU,IAAPC,GAAmB,IAAPG,GAAqB,IAAPH,GAAmB,IAAPG,EGlBhCC,CADSvC,EAARiC,EAAQjC,EAALkC,IAGbM,KAJmB,SAAAC,GAIJ,IAARR,EAAQQ,EAARR,EAAGC,EAAKO,EAALP,EHqBVnB,EAAiB,CGnBJkB,EAAGC,GHoBhBjB,MGTIyB,mLACK,IAAAC,EACwDC,KAAKC,MAA5DZ,EADDU,EACCV,EAAGC,EADJS,EACIT,EAAGY,EADPH,EACOG,kBAAmBC,EAD1BJ,EAC0BI,OAAQrB,EADlCiB,EACkCjB,QAASxB,EAD3CyC,EAC2CzC,SAE5CD,GAAiBgC,EAAIC,GAAK,IAAM,EAEtC,OAAOY,EACLnC,EAAAC,EAAAC,cAAA,OACEC,MAAO,CACLM,SAAU,WACVd,MAAO,OACPC,OAAQ,SAGVI,EAAAC,EAAAC,cAACmC,EAAD,CAAQ/C,cAAeA,GAAgBC,GAEtC6C,IAAWrB,GAAWf,EAAAC,EAAAC,cAACoC,EAAD,CAAS5C,MAAM,SAEpC0C,GAAUrB,GAAWf,EAAAC,EAAAC,cAACoC,EAAD,CAAS5C,MAAM,WAErC0C,GAAUrB,GAAWf,EAAAC,EAAAC,cAACoC,EAAD,CAAS5C,MAAM,mBApBjB6C,aA0BbC,uBAAWjC,EAAkBO,EAhC5B,SAAC2B,EAASC,GAAV,MAAuB,CACrCP,kBAAmBM,EAAQE,aAC3BP,SAAUM,EAAQN,SAClBrB,UAAW2B,EAAQ3B,YA6BNyB,CAAoDT,GCjC7Da,mLACK,IAAAZ,EACmCC,KAAKC,MAAvCW,EADDb,EACCa,kBAAmBC,EADpBd,EACoBc,WACrBC,EAAc,CAClBC,OAAQ,UACRnC,QAAO,GAAAoC,OAAKH,EAAL,eAET,OAAOD,EAAkB7C,EAAAC,EAAAC,cAAA,QAAMC,MAAO4C,GAAc,kBAPnCR,aAWNW,uBAAW3C,EAxBL,CACnB4C,UADmB,WAEjB,MAAO,KAKK,SAACV,EAASC,GAAV,MAAuB,CACrCG,kBAAmBJ,EAAQW,aAC3BC,mBAAoBZ,EAAQa,cAC5BR,WAAYJ,EAAQI,eAcPI,CAAoDN,oBC1BpDW,4BAAgBC,KC2CzBC,EAAa,CACjBC,OAAQ,SACR/D,MAAO,UACPC,OAAQ,UACRC,QAAS,OACT8D,SAAU,OACVC,SAAU,SACVC,OAAQ,mBAIJrE,EAAc,CAClBG,MAAO,QACPC,OAAQ,SAGKkE,IAzDD,SAAAzE,GAwBZ,IAxBwD,IAAA0E,EAAA3C,OAAAC,EAAA,EAAAD,CAAA/B,EAAzCe,eAAyC,GAAxB4D,EAAwBD,EAAA,GAAfE,EAAeF,EAAA,GAElDG,EAAe,SAACC,GAEpB,IAAM7C,EAAI6C,EAAI,EACR5C,EAAIE,KAAK2C,MAAMD,EAAI,GACnBE,EAAQC,EAAYhD,EAAGC,GAE7B,OACEvB,EAAAC,EAAAC,cAAA,OAAKqE,IAAKJ,EAAGhE,MAAOX,GAClBQ,EAAAC,EAAAC,cAACsE,EAAD,CAAelD,EAAGA,EAAGC,EAAGA,GACrB8C,KAQHC,EAAc,SAAChD,EAAGC,GAAJ,OAClBD,IAAM0C,GAAWzC,IAAM0C,EAAUjE,EAAAC,EAAAC,cAACuE,EAAD,MAAa,MAG1CC,EAAU,GACPP,EAAI,EAAGA,EAAI,GAAIA,IACtBO,EAAQC,KAAKT,EAAaC,IAE5B,OAAOnE,EAAAC,EAAAC,cAAA,OAAKC,MAAOsD,GAAaiB,KCfnBE,UAZH,WAAM,IAAAC,EAE4BC,mBAAS,CAAC,EAAG,IAFzCC,EAAA3D,OAAAC,EAAA,EAAAD,CAAAyD,EAAA,GAETzE,EAFS2E,EAAA,GAEOC,EAFPD,EAAA,GAKhB,OADAE,oBAAU,kBPLW,SAAAC,GACrB,GAAI7E,EACF,MAAM,IAAI8E,MAAM,uCAOlB,OAJA9E,EAAW6E,EACX5E,IAGO,WACLD,EAAW,MOLG+E,CAAQ,SAACC,GAAD,OAAiBL,EAAkBK,OAEzDrF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoF,EAAD,CAAOlF,eAAgBA,OCRvBmF,EAAYC,SAASC,eAAe,QAE1CC,iBAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASJ","file":"static/js/main.8c9c34a9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Square = ({ squareIsBlack, children }) => {\r\n  const fill = squareIsBlack ? \"black\" : \"white\";\r\n  const stroke = squareIsBlack ? \"white\" : \"black\";\r\n  const squareStyle = {\r\n    backgroundColor: fill,\r\n    color: stroke,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\"\r\n  };\r\n  return <div style={squareStyle}>{children}</div>;\r\n};\r\n","let knightPosition = [1, 7];\r\nlet observer = null;\r\n\r\n// wrap entire app in an observer to subscribe to a changing state in the most minimal, non-complex way (rather than using EventEmitter or making Game an object model), all that is needed in this case is a stream of values\r\nexport const observe = o => {\r\n  if (observer) {\r\n    throw new Error(\"Multiple observers not implemented.\");\r\n  }\r\n\r\n  observer = o;\r\n  emitChange();\r\n\r\n  // TO-DO: explore purpose of this return statement\r\n  return () => {\r\n    observer = null;\r\n  }\r\n};\r\n\r\nconst emitChange = () => {\r\n  observer(knightPosition);\r\n};\r\n\r\n// check that knight moves in L shapes (according to the rules of chess)\r\nexport const isValidKnightMove = (toX, toY) => {\r\n  const [x, y] = knightPosition; // destructure two-item array\r\n  const dx = Math.abs(toX - x); // if dx is 1, dy needs to be 2\r\n  const dy = Math.abs(toY - y); // if dx is 2, dy needs to be 1\r\n  return (\r\n    (dx === 2 && dy === 1) || (dx === 1 && dy === 2) // L shape\r\n  );\r\n};\r\n\r\nexport const moveKnight = (toX, toY) => {\r\n  knightPosition = [toX, toY];\r\n  emitChange();\r\n};\r\n","// constants for the draggable item types\r\nexport default {\r\n  KNIGHT: 'knight',\r\n}\r\n","import React from \"react\";\r\n\r\nconst Overlay = ({color}) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        top: 0,\r\n        left: 0,\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        zIndex: 1,\r\n        opacity: 0.5,\r\n        backgroundColor: color,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Overlay;","import React, { Component } from \"react\";\r\nimport { DropTarget } from \"react-dnd\";\r\nimport { Square } from \"./Square\";\r\nimport { isValidKnightMove, moveKnight } from \"../util/KnightObserver\";\r\nimport ItemTypes from \"../constants/ItemTypes\";\r\nimport Overlay from \"../util/Overlay\";\r\n\r\n// drop target specification that only handles the drop event\r\nconst squareTarget = {\r\n  canDrop({ x, y }) {\r\n    return isValidKnightMove(x, y);\r\n  },\r\n  drop({ x, y }) {\r\n    // The drop method receives the props of the BoardSquare so it knows where to move the knight when it drops\r\n    moveKnight(x, y);\r\n  }\r\n}\r\n\r\n// TO-DO: explore the purpose of !!\r\nconst collect = (connect, monitor) => ({\r\n  connectDropTarget: connect.dropTarget(),\r\n  isOver: !!monitor.isOver(),\r\n  canDrop: !!monitor.canDrop(),\r\n});\r\n\r\nclass SquareWrapper extends Component {\r\n  render() {\r\n    const { x, y, connectDropTarget, isOver, canDrop, children } = this.props;\r\n    // alternate square colors, determine if it is black or white by its position\r\n    const squareIsBlack = (x + y) % 2 === 1;\r\n    // connect the drop target and show the highlight overlay\r\n    return connectDropTarget(\r\n      <div\r\n        style={{\r\n          position: \"relative\",\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n        }}\r\n      >\r\n        <Square squareIsBlack={squareIsBlack}>{children}</Square>\r\n        {/* no longer dragging, invalid drop location */}\r\n        {isOver && !canDrop && <Overlay color=\"red\" />}\r\n        {/* still dragging, but valid drop location */}\r\n        {!isOver && canDrop && <Overlay color=\"yellow\" />}\r\n        {/* no longer dragging, valid drop location */}\r\n        {isOver && canDrop && <Overlay color=\"green\" />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DropTarget(ItemTypes.KNIGHT, squareTarget, collect)(SquareWrapper);","import React, { Component } from \"react\";\r\nimport { DragSource } from \"react-dnd\";\r\nimport ItemTypes from \"../constants/ItemTypes\";\r\n\r\n// draggable object\r\nconst knightSource = {\r\n  beginDrag() {\r\n    return {};\r\n  },\r\n};\r\n\r\n// collecting function\r\nconst collect = (connect, monitor) => ({\r\n  connectDragSource: connect.dragSource(),\r\n  connectDragPreview: connect.dragPreview(),\r\n  isDragging: monitor.isDragging(),\r\n});\r\n\r\nclass Knight extends Component {\r\n  render() {\r\n    const { connectDragSource, isDragging } = this.props;\r\n    const knightStyle = {\r\n      cursor: \"pointer\",\r\n      opacity: `${isDragging} ? 0.5 : 1`,\r\n    };\r\n    return connectDragSource(<span style={knightStyle}>{\"â™˜\"}</span>);\r\n  }\r\n}\r\n\r\nexport default DragSource(ItemTypes.KNIGHT, knightSource, collect)(Knight);\r\n","import { DragDropContext } from \"react-dnd\";\r\nimport HTML5Backend from \"react-dnd-html5-backend\";\r\n\r\nexport default DragDropContext(HTML5Backend);\r\n","import React from \"react\";\r\nimport SquareWrapper from \"./SquareWrapper\";\r\nimport Knight from \"../pieces/Knight\";\r\nimport withDragDropContext from \"../../lib/withDragDropContext\";\r\n\r\nconst Board = ({ knightPosition: [knightX, knightY] }) => {\r\n  // generate \"smart\" squares (aware of piece's position)\r\n  const renderSquare = (i) => {\r\n    // i: board position, x: column, y: row\r\n    const x = i % 8;\r\n    const y = Math.floor(i / 8);\r\n    const piece = renderPiece(x, y);\r\n\r\n    return (\r\n      <div key={i} style={squareStyle}>\r\n        <SquareWrapper x={x} y={y}>\r\n          {piece}\r\n        </SquareWrapper>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // check if square contains knight piece\r\n  // if square contains knight piece, render it out\r\n  const renderPiece = (x, y) =>\r\n    x === knightX && y === knightY ? <Knight /> : null;\r\n\r\n  // populate chess board squares along with any pieces that may be on them\r\n  const squares = [];\r\n  for (let i = 0; i < 64; i++) {\r\n    squares.push(renderSquare(i));\r\n  }\r\n  return <div style={boardStyle}>{squares}</div>;\r\n\r\n  // CRITICAL NOTE: the bottom return statement would produce the error: \"Cannot have two HTML backends at the same time\".\r\n\r\n  // return (\r\n  //   <DragDropContextProvider backend={HTML5Backend}>\r\n  //     <div style={boardStyle}>{squares}</div>\r\n  //   </DragDropContextProvider>\r\n  // );\r\n\r\n  // Need to use the singleton pattern to ensure only a single instance of DragDropContext is initialized throughout app. Credit fix to @gcorne, https://github.com/react-dnd/react-dnd/issues/186#issuecomment-282789420, and @nickangtc for courteously sharing this fix: https://github.com/react-dnd/react-dnd/issues/740#issuecomment-299686690.\r\n};\r\n\r\n// styling properties applied to the board element\r\nconst boardStyle = {\r\n  margin: \"0 auto\",\r\n  width: \"100vmin\",\r\n  height: \"100vmin\",\r\n  display: \"flex\",\r\n  flexWrap: \"wrap\",\r\n  fontSize: \"10vmin\",\r\n  border: \"1px solid black\",\r\n};\r\n\r\n// styling properties applied to each square element\r\nconst squareStyle = {\r\n  width: \"12.5%\",\r\n  height: \"12.5%\",\r\n};\r\n\r\nexport default withDragDropContext(Board);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Board from \"./components/board/Board\";\r\nimport { observe } from \"./components/util/KnightObserver\";\r\nimport \"./stylesheets/global.css\";\r\n\r\nconst App = () => {\r\n  // since all that is needed in this simple demo is a stream of values, entire app is wrapped by an observer that subscribes to a changing state in the most minimal, non-complex way (rather than using EventEmitter or making Game an object model)\r\n  const [knightPosition, setKnightPosition] = useState([1, 7]);\r\n  // the observe function will return an unsubscribe callback\r\n  useEffect(() => observe((newPosition) => setKnightPosition(newPosition)));\r\n  return (\r\n    <div>\r\n      <Board knightPosition={knightPosition} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nconst mountNode = document.getElementById(\"root\");\r\n\r\nrender(<App />, mountNode);\r\n"],"sourceRoot":""}